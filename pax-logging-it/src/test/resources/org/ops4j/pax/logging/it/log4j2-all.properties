#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# this file keeps all the properties for different Log4J1 integration tests
# just use proper prefix and refer to it in given test

# test for plain FileAppender

builtin.file.log4j.appender.file = org.apache.log4j.FileAppender
builtin.file.log4j.appender.file.append = false
builtin.file.log4j.appender.file.file = target/logs-log4j1/file-appender.log
builtin.file.log4j.appender.file.layout = org.apache.log4j.PatternLayout
builtin.file.log4j.appender.file.layout.ConversionPattern = %c/%C [%p] %m%n

builtin.file.log4j.rootLogger = INFO, file

# test for pax-logging-service specific DailyZipRollingFileAppender

builtin.dailyZip.log4j.appender.console = org.apache.log4j.ConsoleAppender
builtin.dailyZip.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

builtin.dailyZip.log4j.appender.dz = org.apache.log4j.DailyZipRollingFileAppender
builtin.dailyZip.log4j.appender.dz.append = false
builtin.dailyZip.log4j.appender.dz.file = target/logs-log4j1/dz-appender.log
builtin.dailyZip.log4j.appender.dz.filter.ts = osgi:timestampReplacer
builtin.dailyZip.log4j.appender.dz.datePattern = '.'yyyy-MM-dd
builtin.dailyZip.log4j.appender.dz.layout = org.apache.log4j.PatternLayout
builtin.dailyZip.log4j.appender.dz.layout.ConversionPattern = %d{yyyy-MM-dd HH:mm:ss} %c/%C [%p] %m%n

builtin.dailyZip.log4j.rootLogger = INFO, console

builtin.dailyZip.log4j.logger.my.logger = INFO, dz
builtin.dailyZip.log4j.additivity.my.logger = false

# test for MDC accessed through different APIs

mdc.log4j.appender.console = org.apache.log4j.ConsoleAppender
mdc.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

mdc.log4j.appender.file = org.apache.log4j.FileAppender
mdc.log4j.appender.file.append = false
mdc.log4j.appender.file.file = target/logs-log4j1/mdc-file-appender.log
mdc.log4j.appender.file.layout = org.apache.log4j.PatternLayout
mdc.log4j.appender.file.layout.ConversionPattern = %c/%C [%p] %X %m%n

mdc.log4j.rootLogger = INFO, console

mdc.log4j.logger.my.logger = INFO, file
mdc.log4j.additivity.my.logger = false

# test for MDCSiftingAppender

mdc.appender.log4j.appender.sift = org.apache.log4j.sift.MDCSiftingAppender
mdc.appender.log4j.appender.sift.key = bundle.name
mdc.appender.log4j.appender.sift.default = no-such-bundle
# org.apache.log4j.sift.MDCSiftingAppender.setAppender() takes org.apache.log4j.spi.OptionFactory
# as argument - that's special functionality in pax-logging to handle some level of laziness
mdc.appender.log4j.appender.sift.appender = org.apache.log4j.FileAppender
mdc.appender.log4j.appender.sift.appender.layout = org.apache.log4j.PatternLayout
mdc.appender.log4j.appender.sift.appender.layout.ConversionPattern = %c/%C [%p] <%X> %m%n
mdc.appender.log4j.appender.sift.appender.append = false
# bundle.id and bundle.name have direct 1:1 relation, there's no point of having file *not* keyed by
# actual MDC key
mdc.appender.log4j.appender.sift.appender.file = target/logs-log4j1/${bundle.id}-file-appender.log

mdc.appender.log4j.rootLogger = INFO, sift

# test for MDCSiftingAppender with arbitrary key

mdc.appender2.log4j.appender.sift = org.apache.log4j.sift.MDCSiftingAppender
mdc.appender2.log4j.appender.sift.key = my.key
mdc.appender2.log4j.appender.sift.default = default
mdc.appender2.log4j.appender.sift.appender = org.apache.log4j.FileAppender
mdc.appender2.log4j.appender.sift.appender.layout = org.apache.log4j.PatternLayout
mdc.appender2.log4j.appender.sift.appender.layout.ConversionPattern = %c/%C [%p] <%X> %m%n
mdc.appender2.log4j.appender.sift.appender.append = false
mdc.appender2.log4j.appender.sift.appender.file = target/logs-log4j1/${my.key}-file-appender.log

mdc.appender2.log4j.rootLogger = INFO, sift

# test for proper discovery of location

location.log4j2.appender.console.type = Console
location.log4j2.appender.console.name = console
location.log4j2.appender.console.layout.type = PatternLayout
location.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

location.log4j2.appender.file.type = File
location.log4j2.appender.file.name = file
location.log4j2.appender.file.fileName = target/logs-log4j2/location-file-appender.log
location.log4j2.appender.file.layout.type = PatternLayout
location.log4j2.appender.file.layout.pattern = %C | %M | %F | %L : [%p] %m%n

location.log4j2.rootLogger.level = info
location.log4j2.rootLogger.appenderRef.console.ref = console

location.log4j2.logger.my.name = my.logger
location.log4j2.logger.my.level = info
location.log4j2.logger.my.appenderRef.file.ref = file
location.log4j2.logger.my.additivity = false
# needed, because "category" through org.osgi.service.log.LogService is derived from Bundle-SymbolicName
location.log4j2.logger.probe.name = PaxExam-Probe
location.log4j2.logger.probe.level = info
location.log4j2.logger.probe.appenderRef.file.ref = file
location.log4j2.logger.probe.additivity = false

# test for SocketAppender

builtin.socket.log4j.appender.console = org.apache.log4j.ConsoleAppender
builtin.socket.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

builtin.socket.log4j.appender.s = org.apache.log4j.net.SocketAppender
builtin.socket.log4j.appender.s.port = <will be set by test itself>
builtin.socket.log4j.appender.s.remoteHost = localhost
builtin.socket.log4j.appender.s.layout = org.apache.log4j.PatternLayout
builtin.socket.log4j.appender.s.layout.ConversionPattern = %c/%C [%p] %m%n

builtin.socket.log4j.rootLogger = INFO, console

builtin.socket.log4j.logger.my.logger = INFO, s
builtin.socket.log4j.additivity.my.logger = false

# test for ListModelAppender

builtin.list.log4j.appender.console = org.apache.log4j.ConsoleAppender
builtin.list.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

builtin.list.log4j.appender.lm = org.apache.log4j.receivers.varia.ListModelAppender

builtin.list.log4j.rootLogger = INFO, console

builtin.list.log4j.logger.my.logger = INFO, lm
builtin.list.log4j.additivity.my.logger = false

# test for custom, OSGi registered PaxAppender

custom.log4j.appender.console = org.apache.log4j.ConsoleAppender
custom.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

custom.log4j.rootLogger = INFO, console

custom.log4j.logger.my.logger = INFO, osgi:custom
custom.log4j.additivity.my.logger = false

# test for custom, OSGi registered PaxLayout

custom.layout.log4j.appender.console = org.apache.log4j.ConsoleAppender
custom.layout.log4j.appender.console.layout = osgi:custom

custom.layout.log4j.rootLogger = INFO, console

# test for custom, OSGi registered PaxLayout which is not available

custom.fallback.layout.log4j.appender.console = org.apache.log4j.ConsoleAppender
custom.fallback.layout.log4j.appender.console.layout = osgi:custom
custom.fallback.layout.log4j.appender.console.layout.fallback = org.ops4j.pax.logging.extender.ParameterizedLayout
custom.fallback.layout.log4j.appender.console.layout.fallback.Message = Plain and simple parameter

custom.fallback.layout.log4j.rootLogger = INFO, console

# test for custom, OSGi registered PaxErrorHandler

custom.eh.log4j.appender.console = org.apache.log4j.ConsoleAppender
custom.eh.log4j.appender.console.layout = org.apache.log4j.TTCCLayout

custom.eh.log4j.appender.failing = org.ops4j.pax.logging.extender.FailingAppender
custom.eh.log4j.appender.failing.errorhandler = osgi:custom

custom.eh.log4j.rootLogger = INFO, console

custom.eh.log4j.logger.my.logger = INFO, failing
custom.eh.log4j.additivity.my.logger = false

# test for changing log levels which have to be reflected in JUL loggers

update.jul.log4j2.appender.console.type = Console
update.jul.log4j2.appender.console.name = console
update.jul.log4j2.appender.console.layout.type = PatternLayout
# http://logging.apache.org/log4j/2.x/manual/layouts.html#PatternLayout
update.jul.log4j2.appender.console.layout.pattern = %logger/%class [%level] %message%n

update.jul.log4j2.rootLogger.level = info
update.jul.log4j2.rootLogger.appenderRef.console.ref = console

update.jul.log4j2.logger.l1.name = l1
update.jul.log4j2.logger.l1.level = warn
update.jul.log4j2.logger.l2.name = l2
update.jul.log4j2.logger.l2.level = debug

# test(s) for meta properties related not to loggers/appenders/layouts/filters, but to
# Log4J2 itself
# org.apache.logging.log4j.core.config.AbstractConfiguration.setToDefault() checks
# final String levelName = PropertiesUtil.getProperties()
#                                        .getStringProperty(DefaultConfiguration.DEFAULT_LEVEL, defaultLevel.name())
# when there's no level configured for root logger. But we won't add rootLogger.level here, because it'd not get
# any appenders... We want to test only the meta here.

meta1.log4j2.status = trace
meta1.log4j2.verbose = true
meta1.log4j2.dest = out

meta2.log4j2.status = warn
meta2.log4j2.verbose = false
meta2.log4j2.dest = out
